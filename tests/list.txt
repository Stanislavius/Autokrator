#TESTCASE
#<
a = []
a
#>
#output = []
#commentary = should  accept empty list
#_______________________________________________________________
#TESTCASE
#<
a = [1]
a
#>
#output = [1]
#commentary = should create list with values
#_______________________________________________________________
#TESTCASE
#<
a = [1, "asd"]
a
#>
#output = [1, "asd"]
#commentary = should create list with values of different types
#_______________________________________________________________
#TESTCASE
#<
a = [1, ["asd"]]
a
#>
#output = [1, ["asd"]]
#commentary = should create multidimensional list
#_______________________________________________________________
#TESTCASE
#<
a = [1, 2]
b = [3, 4]
a+b
#>
#output = [1, 2, 3, 4]
#commentary = should support adding list to list
#_______________________________________________________________
#TESTCASE
#<
a = [1, 2]
b = [3, [4]]
a+b
#>
#output = [1, 2, 3, [4]]
#commentary = should support adding list containing lists to list
#_______________________________________________________________
#TESTCASE
#<
a = [1, 2]
len(a)
#>
#output = 2
#commentary = should return list length
#title = list.length.1
#_______________________________________________________________
#TESTCASE
#<
a = []
len(a)
#>
#output = 0
#commentary = should return length of empty list
#title = list.length.2
#_______________________________________________________________
#TESTCASE
#<
class some_class
    def __init__(self, a)
        self.a = a
    def __str__(self)
        str(self.a)

a = [some_class(4), some_class(43), some_class(6), some_class(54)]
len(a)
#>
#output = 4
#commentary = should allow object in list
#title = list.length.3
#_______________________________________________________________
#TESTCASE
#<
class some_class
    def __init__(self, a)
        self.a = a
    def __str__(self)
        str(self.a)

a = [some_class(4), some_class(43), some_class(6), some_class(54)]
a[0].a
#>
#output = 4
#commentary = should allow indexing
#title = list.operations.1
#_______________________________________________________________
#TESTCASE
#<
class some_class
    def __init__(self, a)
        self.a = a
    def __str__(self)
        str(self.a)

a = [some_class(4), some_class(43), some_class(6), some_class(54)]
a[0] = 1
a[0]
#>
#output = 1
#commentary = should allow assign to elements
#title = list.operations.3
#_______________________________________________________________
#TESTCASE
#<
s = [1, 2, 3]
s[45] = "sa"
s[46]
#>
#output = NoSuchKey: 2 2
#commentary = return error if no such key
#title = list.NoSuchKey.1
#_______________________________________________________________
#TESTCASE
#<
s = [1, 2, 3]
s[46]
#>
#output = NoSuchKey: 2 2
#commentary = return error if no such key
#title = list.NoSuchKey.2
#_______________________________________________________________
#TESTCASE
#<
s = [1, 2, 3]
s["34"]
#>
#output = WrongIndexType: 2 2
#commentary = return error if no such key
#title = list.wrongIndexType.1
#_______________________________________________________________
#TESTCASE
#<
s = [1, 2
#>
#output = BracketIsNotClosedException: 1 5
#commentary = return error if no such key
#title = notClosed.1
#type = ParsingError
#_______________________________________________________________
#TESTCASE
#<
a = [1, 2]
a * 2
#>
#output = [1, 2, 1, 2]
#title = list.mul.1
#_______________________________________________________________
#TESTCASE
#<
a = [1, 2]
2 * a
#>
#output = [1, 2, 1, 2]
#title = list.mul.2
#_______________________________________________________________
#TESTCASE
#<
a = [1, 2, [3, 4]]
2 * a
#>
#output = [1, 2, [3, 4], 1, 2, [3, 4]]
#title = list.mul.3
#_______________________________________________________________
#TESTCASE
#<
a = [1, 2, [3, 4]]
a * 2
#>
#output = [1, 2, [3, 4], 1, 2, [3, 4]]
#title = list.mul.4
#_______________________________________________________________
#TESTCASE
#<
a = [1]
a.append(4)
a
#>
#output = [1, 4]
#title = list.append.1
#_______________________________________________________________
#TESTCASE
#<
a = [1]
a.append(4, 3)
a
#>
#output = WrongNumberOfArguments: 2 2
#title = list.append.2
#_______________________________________________________________
#TESTCASE
#<
l = [1, 2, 3]
l.append(l)
l
#>
#output = 2
#commentary = should return len
#title = list.recursive.1
#_______________________________________________________________