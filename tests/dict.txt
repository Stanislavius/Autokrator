#TESTCASE
#<
d = {}
d
#>
#output = {}
#commentary = should create and return an empty dict
#title = dict.creation.1
#_______________________________________________________________
#TESTCASE
#<
d = {2:3}
d
#>
#output = {2:3}
#commentary = should create and return dict
#title = dict.creation.2
#_______________________________________________________________
#TESTCASE
#<
d = {2:3, 4:5}
d
#>
#output = {2:3, 4:5}
#commentary = should create and return dict
#title = dict.creation.3
#_______________________________________________________________
#TESTCASE
#<
d = {2:3, 4.5:5}
d
#>
#output = {2:3, 4.5:5}
#commentary = should create and return dict
#title = dict.creation.4
#_______________________________________________________________
#TESTCASE
#<
d = {2:3, "sd":5}
d
#>
#output = {2:3, "sd":5}
#commentary = should create and return dict
#title = dict.creation.5
#_______________________________________________________________
#TESTCASE
#<
d = {2:3, "sd":5}
d.contains(2)
#>
#output = 1
#commentary = should work with keys
#title = dict.contains.1
#_______________________________________________________________
#TESTCASE
#<
d = {"key":3, "sd":5}
d.contains("key")
#>
#output = 1
#commentary = should work with keys
#title = dict.contains.2
#_______________________________________________________________
#TESTCASE
#<
d = {"key":3, "sd":5}
d.contains("key2")
#>
#output = 0
#commentary = should not non-existent key
#title = dict.contains.3
#_______________________________________________________________
#TESTCASE
#<
d = {4.5:3, "sd":5}
d.contains(4.5)
#>
#output = 1
#commentary = should work with keys
#title = dict.contains.4
#_______________________________________________________________
#TESTCASE
#<
s = {1:2, 3:4}
s[45] = "sa"
s[45]
#>
#output = "sa"
#commentary = should return value by key
#title = dict.items.1
#_______________________________________________________________
#TESTCASE
#<
s = {1:2, 3:4}
s[45] = "sa"
s[46]
#>
#output = NoSuchKey: 3 2
#commentary = return error if no such key
#title = dict.items.2
#_______________________________________________________________
#TESTCASE
#<
s = {}
len(s)
#>
#output = 0
#commentary = should return len
#title = dict.len.1
#_______________________________________________________________
#TESTCASE
#<
s = {2:3}
len(s)
#>
#output = 1
#commentary = should return len
#title = dict.len.2
#_______________________________________________________________
#TESTCASE
#<
s = {2:3, 2:5}
len(s)
#>
#output = 1
#commentary = should return len
#title = dict.len.3
#_______________________________________________________________
#TESTCASE
#<
s = {2:3, 3:5}
len(s)
#>
#output = 2
#commentary = should return len
#title = dict.len.4
#_______________________________________________________________
#TESTCASE
#<
class c
    def __init__(self, a)
        self.a = 5
    def s(self)
        self.a = self.a + 1
    def n(self)
        self.a = self.a - 1
    def c(self)
        self.c = self.a

c.__dict__
#>
#output = {"__dict__":{...}, "s":<Func object s>, "c":<Func object c>, "__call__":<Func object __call__>, "__init__":<Func object __init__>, "n":<Func object n>, "__class__":type, "__name__":"c"}
#title = dict.recursive.1
#_______________________________________________________________
#TESTCASE
#<
class c
    def __init__(self, a)
        self.a = 5
    def s(self)
        self.a = self.a + 1
    def n(self)
        self.a = self.a - 1
    def c(self)
        self.c = self.a

c.__dict__["__dict__"]
#>
#output = {"__dict__":{...}, "s":<Func object s>, "c":<Func object c>, "__call__":<Func object __call__>, "__init__":<Func object __init__>, "n":<Func object n>, "__class__":type, "__name__":"c"}
#title = dict.recursive.2
#_______________________________________________________________
#TESTCASE
#<
class c
    def __init__(self, a)
        self.a = 5
    def s(self)
        self.a = self.a + 1
    def n(self)
        self.a = self.a - 1
    def c(self)
        self.c = self.a

c.__dict__[__dict__] == c.__dict__
#>
#output = 1
#title = dict.recursive.3
#_______________________________________________________________
